@using EmployeesCh12.Models;
@model PaginatedList<EmployeesCh12.Models.Employee>

<!--model IEnumerable<EmployeesCh12.Models.Employee>-->

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p> <!--Below in <form> is filtering, not sorting or pagination-->
    <form asp-action="Index" method="get">  <!--after it submits we want to go back to the index.  Get allows it to display in the bar..could bookmark-->
        <div class ="form-actions no-color">
            <p>
                Find by name: <input type="text" name="SearchString" value="@ViewData["currentFilter"]"/>
                <input type="submit" valut ="Search" class="btn btn-default"/>   <!--gives the full list of employees back (if no search get full list)-->
                <a asp-action="Index">Back to Full list</a> <!--takes back to the index-->
            </p>
        </div>
    </form>

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayName("First Name")                 <!--Can just type in First Name without the tag helper-->
            </th>
            <th> <!--added asp-route-currentFilter to make it persist so it is not lost..retain the current sort-->
                <a asp-action="Index" asp-route-sortOrder="@ViewData["NameSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Last Name</a>  
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["DateSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Hire Date</a>
            </th>
            <th>
                @Html.DisplayName("Department")
            </th>
            <th>
                @Html.DisplayName("Benefit Category")
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.FirstName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.LastName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.HireDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Department.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Benefits.Category)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.ID">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.ID">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.ID">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>
@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";        
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}
<!--Sending all of the parameters to the controller when they click the previous or the next buttons-->
<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex -1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @prevDisabled">
   Previous
</a>
<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @nextDisabled">
   Next
</a>
